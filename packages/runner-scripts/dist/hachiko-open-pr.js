#!/usr/bin/env tsx
/**
 * Hachiko PR Creation Script
 *
 * This script creates or updates a pull request with the changes
 * made by the agent during migration step execution.
 */
import { execa } from "execa";
import { z } from "zod";
// Event payload schema
const HachikoEventSchema = z.object({
    planId: z.string(),
    stepId: z.string(),
    chunk: z.string().optional(),
    promptConfigRef: z.string().optional(),
    commitMessage: z.string(),
    branchName: z.string(),
});
async function main() {
    console.log("üîÄ Hachiko PR Creation Starting...");
    const eventJson = process.argv[2];
    if (!eventJson) {
        console.error("‚ùå Missing event payload argument");
        process.exit(1);
    }
    let event;
    try {
        event = HachikoEventSchema.parse(JSON.parse(eventJson));
    }
    catch (error) {
        console.error("‚ùå Invalid event payload:", error);
        process.exit(1);
    }
    console.log("üìã Event Details:");
    console.log(`  Plan ID: ${event.planId}`);
    console.log(`  Step ID: ${event.stepId}`);
    console.log(`  Branch: ${event.branchName}`);
    // Check if we have any changes to push
    const hasChanges = await checkForChanges();
    if (!hasChanges) {
        console.log("‚ÑπÔ∏è  No changes detected, skipping PR creation");
        return;
    }
    // Push branch to remote
    await pushBranch(event.branchName);
    // Create or update PR
    await createOrUpdatePR(event);
    console.log("‚úÖ PR creation completed successfully");
}
async function checkForChanges() {
    try {
        const result = await execa("git", ["diff", "--name-only", "HEAD~1"]);
        const changedFiles = result.stdout.split("\n").filter(Boolean);
        console.log(`üìä Changes detected: ${changedFiles.length} files`);
        if (changedFiles.length > 0) {
            console.log("  Changed files:");
            for (const file of changedFiles) {
                console.log(`    - ${file}`);
            }
        }
        return changedFiles.length > 0;
    }
    catch (error) {
        console.log("‚ÑπÔ∏è  No changes detected (or error checking):", error);
        return false;
    }
}
async function pushBranch(branchName) {
    console.log(`‚¨ÜÔ∏è  Pushing branch: ${branchName}`);
    try {
        await execa("git", ["push", "-u", "origin", branchName], {
            stdio: "inherit",
        });
        console.log("  ‚úÖ Branch pushed successfully");
    }
    catch (error) {
        console.error("‚ùå Failed to push branch:", error);
        throw error;
    }
}
async function createOrUpdatePR(event) {
    console.log("üìù Creating/updating pull request...");
    // For now, just log what we would do
    // TODO: Use GitHub CLI or Octokit to create actual PR
    const chunkText = event.chunk ? ` (${event.chunk})` : "";
    const title = `Hachiko: ${event.planId} - ${event.stepId}${chunkText}`;
    const body = generatePRBody(event);
    console.log("üìã PR Details:");
    console.log(`  Title: ${title}`);
    console.log(`  Base: main`);
    console.log(`  Head: ${event.branchName}`);
    console.log(`  Body length: ${body.length} characters`);
    // Try to create PR using GitHub CLI if available
    try {
        const result = await execa("gh", [
            "pr", "create",
            "--title", title,
            "--body", body,
            "--head", event.branchName,
            "--base", "main",
            "--label", "hachiko",
            "--label", "migration",
            "--label", `hachiko:plan:${event.planId}`,
            "--label", `hachiko:step:${event.planId}:${event.stepId}${event.chunk ? `:${event.chunk}` : ""}`,
        ], {
            stdio: "inherit",
        });
        console.log("‚úÖ Pull request created successfully");
    }
    catch (error) {
        console.log("‚ö†Ô∏è  Could not create PR with GitHub CLI (may not be available):", error);
        console.log("   In a real environment, this would use the GitHub API");
    }
}
function generatePRBody(event) {
    const chunkText = event.chunk ? `\n- **Chunk**: ${event.chunk}` : "";
    return `This pull request was automatically generated by Hachiko as part of a migration.

## Migration Details
- **Plan**: ${event.planId}
- **Step**: ${event.stepId}${chunkText}
- **Branch**: ${event.branchName}
- **Prompt Config**: ${event.promptConfigRef || "default"}

## Review Checklist
- [ ] Changes look correct and complete
- [ ] Tests pass
- [ ] No unintended side effects
- [ ] Ready to merge

## Agent Information
- **Execution**: Automated via Hachiko agent
- **Commit**: ${event.commitMessage}

**Note**: This PR is part of an automated migration. After merging, the next step will be automatically queued.

---
*Generated by [Hachiko](https://github.com/launchdarkly/hachiko)*`;
}
if (import.meta.url === `file://${process.argv[1]}`) {
    main().catch((error) => {
        console.error("‚ùå Fatal error:", error);
        process.exit(1);
    });
}
//# sourceMappingURL=hachiko-open-pr.js.map